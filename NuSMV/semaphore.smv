MODULE user(semaphore, active)
VAR
    -- The states in our FSM
    state : {idle, entering, critical, exiting};

ASSIGN
    -- Initial state for a process should be idle
    init(state) := idle;
    next(state) := case
        state = idle & active:                      {idle, entering};
        state = entering & !semaphore & active:     critical;
        state = critical & active:                  {critical, exiting};
        state = exiting & active:                   idle;
        TRUE:                                       state;
    esac;

    /--
        Here we define how the process should handle the semaphore.
        We can only take the semaphore when we enter the entering state
        and we are activly being scheduled.
        When we exit and are still scheduled we leave the semaphore.
    --/
    next(semaphore) := case
        state = entering & active:   TRUE;
        state = exiting & active:    FALSE;
        TRUE:                       semaphore;
    esac;

MODULE main
VAR
    -- The semaphore (global variable)
    semaphore:      boolean;
    -- Process ID. Each process are given a name
    pid:            0..1;
    -- Run proc1 WHEN pid = 0
    proc1:          process user(semaphore, next(pid) = 0);
    -- Run proc2 WHEN pid = 1
    proc2:          process user(semaphore, next(pid) = 1);

ASSIGN
    -- The semaphore shuld be false when we start the program
    init(semaphore) := FALSE;

FAIRNESS
    pid = 0;

FAIRNESS
    pid = 1;

FAIRNESS
    -- proc1 could potentially take forever to reach the critical state
    proc1.state = critical;

FAIRNESS
    -- proc2 could potentially take forever to reach the critical state
    proc2.state = critical;

-- 2 processes can't be in the critical section at the same time
SPEC AG !(proc1.state = critical & proc2.state = critical); -- safety

/--
    proc1 will always enter the state entering and then always eventually
    reach the critical state
--/
SPEC AG (proc1.state = entering -> AF proc1.state = critical); -- liveness

/--
    proc2 will always enter the state entering and then always eventually
    reach the critical state
--/
SPEC AG (proc2.state = entering -> AF proc2.state = critical); -- liveness


-- ERROR OUTPUT


/--

Explanation for the error trace:

The process could potentially take forever to reach the critical state
(AF proc1.state = critical) and the process scheduler don't work with infinite
time, therefore we need to tell the scheduler that it might loop forever and
that it should give the process some time to reach that state.

--/

---- specification AG !(proc1.state = critical & proc2.state = critical)  is true
---- specification AG (proc1.state = entering -> AF proc1.state = critical)  is false
---- as demonstrated by the following execution sequence
--Trace Description: CTL Counterexample
--Trace Type: Counterexample
--  -> State: 1.1 <-
--    semaphore = FALSE
--    pid = 0
--    proc1.state = idle
--    proc2.state = idle
--  -> Input: 1.2 <-
--    _process_selector_ = proc1
--    running = FALSE
--    proc2.running = FALSE
--    proc1.running = TRUE
--  -- Loop starts here
--  -> State: 1.2 <-
--    proc1.state = entering
--  -> Input: 1.3 <-
--    _process_selector_ = proc2
--    proc2.running = TRUE
--    proc1.running = FALSE
--  -> State: 1.3 <-
---- specification AG (proc2.state = entering -> AF proc2.state = critical)  is false
---- as demonstrated by the following execution sequence
--Trace Description: CTL Counterexample
--Trace Type: Counterexample
--  -> State: 2.1 <-
--    semaphore = FALSE
--    pid = 0
--    proc1.state = idle
--    proc2.state = idle
--  -> Input: 2.2 <-
--    _process_selector_ = proc2
--    running = FALSE
--    proc2.running = TRUE
--    proc1.running = FALSE
--  -- Loop starts here
--  -> State: 2.2 <-
--    pid = 1
--    proc2.state = entering
--  -> Input: 2.3 <-
--    _process_selector_ = main
--    running = TRUE
--    proc2.running = FALSE
--  -> State: 2.3 <-
