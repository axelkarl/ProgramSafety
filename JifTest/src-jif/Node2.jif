package exercise;

// Implement the Node class of LinkedList
// Add annotations to the methods and field
// Alice, Bob and Chuck expresse concern about the content of the list.
// The list contains some of their private data so each of them wants
// to keep the data private.
// Alice, Bob and Chuck allow each other to know how many elements are in the list 
// Complete the code and add annotations and declassification where needed

/*
	public {RETURN-LABEL}foo{CALL-LABEL}({ARGUMENT-LABEL}int x) : {EXCEPTION-LABEL} throws Exception {}
*/

public class Node2 {
	public int {* -> Alice, Bob}value;
	public Node2 {* -> Alice, Bob, Chuck}next;

	public Node2(int {* -> Alice, Bob}value) {
		this.value = value;
		this.next = null;
	}

	public void add {* -> Alice, Bob, Chuck}(int {* -> Alice, Bob}value)  {
		this.next = new Node2(value);
	}

	public int {* -> Alice, Bob, Chuck}length() {
		Node2 current = this;
		int length = 0;
		while (current != null) {
			length++;
			current = current.next;
		}
		return length;
	}

	public int get {* -> Alice, Bob}(int {* -> Alice, Bob}i) : {* -> Alice, Bob} throws Exception {
		if (i < 0) throw new Exception("Negative values are not defined");
		Node2 current = this;
		int value = 0;
		for (int j = 0; j <= i; j++) {
			if(current == null){
				throw new Exception("Out of Bounds");
			} else if(j == i) {
				value = current.value;
				break;
			} else {
				current = current.next;
			}
		}
		return value;
	}

	public int {*->Alice&Bob&Chuck}mean {* -> Alice, Bob, Chuck}() {
		try {
			Node2 current = this;
			int total = 0, count = 0;
			while (current != null) {
				count += 1;
				total += current.value;
				current = current.next;
			}
			// context: Alice&Bob&Chuck
			return total / count;
		} catch (ArithmeticException e) {
			return 0;
		} 
	}

	public int {Alice->Chuck;Bob->Chuck; Chuck->Chuck} discloseMeanToChuck(){
		int mean = mean();
		return mean;
	}

	public int {Chuck->Chuck} transferMeanToChuck()  {
		int mean = discloseMeanToChuck();
		return mean;
	}
}
