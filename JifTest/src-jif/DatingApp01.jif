package project;

public class DatingApp01 authority (Alice, Bob, Chuck) {
    private double {Alice->Alice} alicePositionX;
    private double {Alice->Alice} alicePositionY;
    private String {Alice->Alice} alicePhone;

    private double {Bob->Bob} bobPositionX;
    private double {Bob->Bob} bobPositionY;
    private String {Bob->Bob} bobPhone;

    private double {Chuck->Chuck} chuckPositionX;
    private double {Chuck->Chuck} chuckPositionY;
    private String {Chuck->Chuck} chuckPhone;

    private NodeAlice {Alice->Alice} aliceLikes;
    private NodeBob {Bob->Bob} bobLikes;
    private NodeChuck {Chuck->Chuck} chuckLikes;

    public void updateAlice{Alice->Alice}(double {Alice->Alice}x, double {Alice->Alice}y, String {Alice->Alice}Phone) {
        this.alicePositionX = x;
        this.alicePositionY = y;
        this.alicePhone = Phone;
    }

    public void updateBob{Bob->Bob}(double {Bob->Bob} x, double {Bob->Bob} y, String {Bob->Bob} Phone) {
        this.bobPositionX = x;
        this.bobPositionY = y;
        this.bobPhone = Phone;
    }

    public void updateChuck{Chuck->Chuck}(double {Chuck->Chuck} x, double {Chuck->Chuck} y, String {Chuck->Chuck} Phone) {
        this.chuckPositionX = x;
        this.chuckPositionY = y;
        this.chuckPhone = Phone;
    }

    public NodeAlice {Alice->Alice} findAliceNeighbours {Alice->Alice}() where authority(Bob, Chuck) {
        NodeAlice neighbours = null;
        double {Alice->Alice} bobDistance = declassify(
                    (this.alicePositionX - this.bobPositionX) * (this.alicePositionX - this.bobPositionX) + (this.alicePositionY - this.bobPositionY) * (this.alicePositionY - this.bobPositionY),
                    {Alice&Bob->Alice&Bob} to {Alice->Alice}
                );
        double {Alice->Alice} chuckDistance = declassify(
                    (this.alicePositionX - this.chuckPositionX) * (this.alicePositionX - this.chuckPositionX) + (this.alicePositionY - this.chuckPositionY) * (this.alicePositionY - this.chuckPositionY),
                    {Alice&Chuck->Alice&Chuck} to {Alice->Alice}
                );
        double threshold = 10 * 10; // maximum allowable distance

        if (threshold >= bobDistance) {
            neighbours = NodeAlice.append(neighbours, new NodeAlice(Bob, bobDistance));
        } else if (threshold >= chuckDistance) {
            neighbours = NodeAlice.append(neighbours, new NodeAlice(Chuck, chuckDistance));
        }
        return neighbours;
    }

    public void addAliceLike{Alice->Alice}(principal {Alice->Alice}user) {
        NodeAlice neighbours = findAliceNeighbours();
        while(neighbours != null){
            if(neighbours.user == user) {
                this.aliceLikes = NodeAlice.append(this.aliceLikes, neighbours);
                return;
            }
            neighbours = neighbours.next;
			}
    }

    private boolean {Alice->Alice} isAliceInBobLikes{Alice->Alice}() where authority(Bob) {
        boolean {Bob->Bob} found = false;
        NodeBob {Bob->Bob} current = this.bobLikes;
        while(current != null){
            if(current.user == Alice) {
                found = true;
                break;
            }
            current = current.next;
        }
        return declassify(found, {Bob->Bob;Alice->Alice} to {Alice->Alice});
    }

    public boolean {Alice->Alice} isAliceInChuckLikes{Alice->Alice}() where authority(Chuck) {
        boolean {Chuck->Chuck} found = false;
        NodeChuck {Chuck->Chuck} current = this.chuckLikes;
        while(current != null){
            if(current.user == Alice) {
                found = true;
                break;
            }
            current = current.next;
        }
        return declassify(found, {Chuck->Chuck;Alice->Alice} to {Alice->Alice});
    }

    public String {Alice->Alice} discloseNumberToAlice{Alice->Alice}(principal {Alice->Alice}user) where authority(Bob, Chuck) {
        if (user == Bob && this.isAliceInBobLikes()) {
            return declassify(this.bobPhone, {Bob->Bob;Alice->Alice} to {Alice->Alice});
        } else if (user == Chuck && this.isAliceInChuckLikes()) {
            return declassify(this.chuckPhone, {Chuck->Chuck;Alice->Alice} to {Alice->Alice});
        }
        return null;
    }
}
